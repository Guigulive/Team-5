var Payroll = artifacts.require("./Payroll.sol");
 
 contract('Payroll', function(accounts) {
   it(" add employee", function() {
     return Payroll.deployed().then(function(instance) {
       PayrollInstance = instance;
       return PayrollInstance.addEmployee(accounts[1], 1, {from: accounts[0]});
    }).then(function() {
       return PayrollInstance.employees.call(accounts[1]);
     }).then(function(newEmployee) {
       assert.equal(newEmployee[1], web3.toWei(1), "wrong salary.");
       assert.equal(newEmployee[0], accounts[1], 'wrong address');
      return PayrollInstance;
     }).then(function() {
       return PayrollInstance.getTotalSalary.call();
     }).then(function(TotalSalary) {
       //console.log('Total salary: ', TotalSalary);
       assert.equal(TotalSalary, web3.toWei(1), "wrong totalsalary");
     });
   });
 
   it(" add fund => calculate runway", function() {
     return Payroll.deployed().then(function(instance) {
       PayrollInstance = instance;
       return PayrollInstance.addFund({from: accounts[0], value: 2000000000000000000});
     }).then(function() {
       return PayrollInstance.calculateRunway.call();
     }).then(function(Runway) {
       //console.log("Runway: ", Runway);
       assert.equal(Runway, 2, "wrong runway.");
     }).then(function() {
       return PayrollInstance.hasEnoughFund.call();
     }).then(function(If_Enough) {
       assert.equal(If_Enough, 1, "wrong fund estimation.")
     });
   });
 
   it(" remove employee", function() {
     return Payroll.deployed().then(function(instance) {
      PayrollInstance = instance;
       return PayrollInstance.removeEmployee(accounts[1], {from: accounts[0]});
     }).then(function() {
      return PayrollInstance.employees.call(accounts[1]);
     }).then(function(newEmployee) {
       assert.equal(newEmployee[0], "0x0000000000000000000000000000000000000000", "failed removal.");
     });
   });
   
   pragma solidity ^0.4.14; 



import './SafeMath.sol';

import './Ownable.sol';





contract Payroll is Ownable {

    

    using SafeMath for uint;

    

    uint constant payDuration = 10 seconds;

    address owner;

    mapping(address=>Employee) public employees; 

    uint totalsalary;

    

    struct Employee {

        address id;

        uint salary;

        uint lastPayday;

    }

    

    modifier employeeExist(address employeeId){

        

        var employee = employees[employeeId];

        assert(employee.id != 0x0);

        _;

        

    }

    

    modifier addresscheck (address employeeId, address newEmployeeId){

        

        require (employeeId!=newEmployeeId);

        _;

    }

    

    

    function _partialPaid(Employee employee) private {

        uint payment = employee.salary .mul (now.sub( employee.lastPayday)).div(payDuration);

        employee.id.transfer(payment);

    }

    

  

    

    function addEmployee(address employeeId, uint salary) onlyOwner {

        var employee = employees[employeeId];

        assert(employee.id == 0x0);

        totalsalary=totalsalary.add(salary*1 ether); 

        employees[employeeId]=(Employee(employeeId, salary * 1 ether, now));

        

    }

    

    function removeEmployee(address employeeId) onlyOwner employeeExist(employeeId){

        var employee = employees[employeeId];

        _partialPaid(employee);

        totalsalary=totalsalary.sub(employee.salary);

        delete employees[employeeId];

    }

    

    function updateEmployee(address employeeId, uint salary) onlyOwner employeeExist(employeeId){

        var employee= employees[employeeId];

        totalsalary=totalsalary.sub(employee.salary);

        _partialPaid(employee);

        employees[employeeId].salary = salary * 1 ether; 

        employees[employeeId].lastPayday = now; 

        totalsalary=totalsalary.add(salary*1 ether);



return;

            

    }

    

    function addFund() payable returns (uint){

        return this.balance;

    }

    

    function calculateRunway() returns (uint){



        

        return this.balance.div(totalsalary);

    }

    

    

    function hasEnoughFund() returns (bool){

        return calculateRunway() > 0;

    }

    

    /* 

    function checkEmployee(address employeeId) returns (uint salary, uint lastPayday){

        var employee=employees[employeeId];

        salary=employee.salary;

        lastPayday=employee.lastPayday;

    }

    

    */

    

    function getPaid() employeeExist(msg.sender) {

        var employee =employees[msg.sender];

        

        uint nextPayday = employee.lastPayday + payDuration;

        

        if (nextPayday > now){

            revert();

        } 

        

        employees[msg.sender].lastPayday = nextPayday;

        employee.id.transfer(employee.salary);

    }
        function getTotalSalary() returns (uint) {
	    return totalsalary;
        }
    

    function changePaymentAddress (address employeeId, address newEmployeeId)onlyOwner addresscheck(employeeId, newEmployeeId){



        var oldEmployee = employees[employeeId]; 

        employees[newEmployeeId] = Employee(newEmployeeId, oldEmployee.salary, oldEmployee.lastPayday); 

        delete employees[employeeId]; 

    }

}
 
 });
