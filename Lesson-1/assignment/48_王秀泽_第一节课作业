pragma solidity ^0.4.14;



contract Payroll {

    uint constant payDuration = 10 seconds;

    address companyowner=0xca35b7d915458ef540ade6068dfe2f44e8fa733c;

    uint salary=1 ether;

    address employee=0x14723a09acff6d2a60dcdf7aa4aff308fddc160c;

    uint lastPayday;

    function Payroll()  {

        companyowner = msg.sender;

    }

    

    function updateEmployeeinfor(address newa, uint news) {

        require(msg.sender == companyowner);

        

        if (employee!=0x0) {

            uint payment = salary * (now - lastPayday) / payDuration;

            employee.transfer(payment);

        }

        

        employee = newa;

        salary = news * 1 ether;

        lastPayday = now;

    }

    

    function addFund() payable returns (uint) {

        return this.balance;

    }

    

    function calculateRunway() returns (uint) {

        return this.balance / salary;

    }

    

    function hasEnoughFund() returns (bool) {

        return calculateRunway() > 0;

    }

    

    function getPaid() {

        require(msg.sender == employee);

        

        uint nextPayday = lastPayday + payDuration;

        assert(nextPayday < now);



        lastPayday = nextPayday;

        employee.transfer(salary);

    }
    
    function getbalance (address person) public view returns(uint)
    {
        return person.balance;
    }

}
