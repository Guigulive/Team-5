/*作业请提交在这个目录下*/


/*gas consumption
22966 23747 24528 25309 26090 26871 27652 28433 29214 29995
Gas一直在持续增加，且增加值固定，约800；其主要原因则是在进行CalculateRunway时，我们在利用for循环来计算总工资。因此每多一个员工，将多一个iteration。

考虑到题目中每个员工工资固定，其实我们可以直接利用员工数当作总工资的ether数。其改正版本被当作注释标在下面。
*/



pragma solidity ^0.4.14;

contract Payroll {
    
    uint constant payDuration = 10 seconds;
    address owner;
    Employee[] employees; 
    uint Totalsalary;
    
    struct Employee {
        address id;
        uint salary;
        uint lastPayday;
    }

    
    
    function Payroll() {
        owner = msg.sender;
    }
    
    
    function _partialPaid(Employee employee) private {
        uint payment = employee.salary * (now - employee.lastPayday) / payDuration;
        employee.id.transfer(payment);
    }
    
    function _findEmployee(address employeeId) private returns (Employee, uint){
        for (uint i=0; i < employees.length; i++){
            if (employees[i].id == employeeId){
                return (employees[i],i);
            }
        }
    }
    
    function addEmployee(address employeeId, uint salary) {
        require(msg.sender == owner);
        var (employee, index) = _findEmployee(employeeId);
        assert(employee.id == 0x0);
        employees.push(Employee(employeeId, salary * 1 ether, now));
        Totalsalary=Totalsalary+employees[employees.length-1].salary;
    }
    
    function removeEmployee(address employeeId){
        require(msg.sender == owner);
        var(employee,index) = _findEmployee(employeeId);
        assert(employee.id != 0x0);
        _partialPaid(employee);
        Totalsalary=Totalsalary-employee.salary;
        delete employees[index];
        employees[index] = employees[employees.length-1];
        employees.length -= 1;
        return;
          
    }
    
    function updateEmployee(address employeeId, uint salary) {
        require(msg.sender == owner);
        var(employee,index) = _findEmployee(employeeId);
        assert(employee.id != 0x0);
        _partialPaid(employee);
        Totalsalary =Totalsalary-employee.salary; 
        employees[index].salary = salary * 1 ether; 
        employees[index].lastPayday = now; 
        Totalsalary =Totalsalary+ employees[index].salary; 
        return;
            
    }
    
    function addFund() payable returns (uint){
        return this.balance;
    }
    
    function calculateRunway() returns (uint){

        return this.balance / Totalsalary;
    }
    
    
    /*
    function calculateRunway() returns (uint){
        return this.balance / (employees.length*1 ether);
    }
    */
    
    
    function hasEnoughFund() returns (bool){
        return calculateRunway() > 0;
    }
    
    
    function getPaid() {
        var(employee,index) = _findEmployee(msg.sender);
        assert(employee.id != 0x0);
        
        uint nextPayday = employee.lastPayday + payDuration;
        
        if (nextPayday > now){
            revert();
        } 
        
        employees[index].lastPayday = nextPayday;
        employee.id.transfer(employee.salary);
    }
}

